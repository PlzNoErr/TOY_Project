<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssafy.ssafit.model.dao.VideoDao">
    <resultMap id="videoMap" type="Video">
        <result column="video_id" property="videoId"/>
        <result column="video_url" property="videoUrl"/>
        <result column="title" property="title"/>
        <result column="description" property="description"/>
        <result column="like_count" property="likeCount"/>
        <result column="view_count" property="viewCount"/>
        <result column="create_time" property="createTime"/>
        <result column="update_time" property="updateTime"/>
        <result column="category" property="category"/>
    </resultMap>
    <resultMap id="likeMap" type="Like">
        <result column="like_id" property="likeId"/>
        <result column="user_seq" property="userSeq"/>
        <result column="video_id" property="videoId"/>
    </resultMap>
    <insert id="insertVideo" parameterType="Video">
        INSERT INTO video (video_url, title, description, create_time, update_time, category)
        VALUES (#{videoUrl}, #{title}, #{description}, now(), now(), #{category});
    </insert>
    <update id="updateVideo" parameterType="Video">
        UPDATE video
        SET video_url = #{videoUrl},
        title = #{title},
        description = #{description},
        like_count = #{likeCount},
        view_count = #{viewCount},
        update_time = now(),
        category = #{category}
        WHERE video_id = #{videoId};
    </update>
    <update id="updateLikeCountByVideoIdAndInt" parameterType="long">
        UPDATE video
        <if test="i >= 0">
            SET like_count = like_count + 1
        </if>
        <if test="0 > i">
            SET like_count = like_count - 1
        </if>
        WHERE video_id = #{videoId};
    </update>
    <update id="updateViewCountByVideoId" parameterType="long">
        UPDATE video
        SET view_count = view_count + 1
        WHERE video_id = #{videoId};
    </update>
    <delete id="deleteVideo" parameterType="long">
        DELETE FROM video
        WHERE video_id = #{videoId};
    </delete>
    <select id="selectByVideoId" parameterType="long" resultMap="videoMap">
        SELECT * FROM video
        WHERE video_id = #{videoId};
    </select>
    <select id="selectAllByCondition" parameterType="java.util.HashMap" resultMap="videoMap">
        SELECT * FROM video
        <if test='"category".equalsIgnoreCase(mod)'>
            WHERE category LIKE CONCAT('%', #{keyword}, '%')
            ORDER BY video_id DESC;
        </if>
        <if test='"title".equalsIgnoreCase(mod)'>
            WHERE title LIKE CONCAT('%', #{keyword}, '%')
            ORDER BY video_id DESC;
        </if>
        <if test='"description".equalsIgnoreCase(mod)'>
            WHERE description LIKE CONCAT('%', #{keyword}, '%')
            ORDER BY video_id DESC;
        </if>
        <if test='"view_count".equalsIgnoreCase(mod)'>
            ORDER BY view_count DESC;
        </if>

    </select>
    <select id="selectAllByLike" parameterType="long" resultMap="videoMap">
        SELECT v.video_id, v.video_url, v.title, v.description,
        v.create_time, v.update_time, v.category, v.like_count, v.view_count
        FROM `like` l
        INNER JOIN `video` v
        ON l.video_id = v.video_id
        WHERE l.user_seq = #{userSeq};
    </select>
    <insert id="insertLike" parameterType="long">
        INSERT INTO `like` (video_id, user_seq)
        VALUES (#{videoId}, #{userSeq});
    </insert>
    <delete id="deleteLike" parameterType="long">
        DELETE FROM `like`
        WHERE video_id = #{videoId} AND user_seq = #{userSeq};
    </delete>
    <select id="selectLike" parameterType="long" resultMap="likeMap">
        SELECT * FROM `like`
        WHERE video_id = #{videoId} AND user_seq = #{userSeq};
    </select>
    <select id="selectAllByFollowingLike" parameterType="long" resultMap="videoMap">
        SELECT DISTINCT v.video_id, v.video_url, v.title, v.description,
        v.create_time, v.update_time, v.category, v.like_count, v.view_count
        FROM `like` l
        INNER JOIN `video` v
        ON l.video_id = v.video_id
        WHERE l.user_seq IN
        (SELECT U.user_seq as user_seq
        FROM FOLLOW F
        INNER JOIN USER U
        ON F.follow_user_seq = U.user_seq
        WHERE F.following_user_seq = #{userSeq});
    </select>

</mapper>